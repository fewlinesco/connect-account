' ###############################################################################
' ########### HERE IS THE LIST OF DIAGRAMS USED FOR THE DOCUMENTATION ###########
' ###############################################################################


' ===========================================================
' ======================= OAuth2 flow =======================
' ===========================================================

@startuml
skinparam NoteBackgroundColor #fff
skinparam NoteBorderColor #000

skinparam sequence {
	ArrowColor #000
	ActorBorderColor #000

	LifeLineBorderColor #000
	LifeLineBackgroundColor #000

	ParticipantBorderColor #000
	ParticipantBackgroundColor #fff
	ParticipantFontColor #000

	ActorBackgroundColor #000
	ActorFontColor #000

  NoteBorderColor #000
}

skinparam roundcorner 5

actor User                         as user
participant "Account Web Client"   as account
database DynamoDB                   as dynamo
participant "Connect"              as connect

user -> account : Wants to login

== OAuth2 client initialization ==

account -> connect : Fetch OpenID configuration
note left
The **@fwl/oauth2** package mainly provides
an abstraction for the OAuth2 flow, and a
secure way to decrypt/verify **JWE** or 
**JWS** for **HS256** and **RS256** algorithms.
end note
connect -> account : Send back OpenID configuration and stores it in-memory

== Connect authentication flow ==

account -> connect : Redirect to **authorize_url**
note left
The **authorize_url** is built with
the **client_id**, **response_type**,
**redirect_uri** and **scope**.
end note
connect -> connect : User logs in and accepts scopes
connect -> account : Send back the **authorization_code** using the **redirect_uri**
account -> connect : Send the **payload**
note left
- client_id
- client_secret
- grant_type
- redirect_uri
- authorization_code
end note
connect -> account : Send back **access_token** + **refresh_token** + **id_token**
account -> dynamo : Insert **user data** in DB
note left
- sub (hash key)
- refresh_token
end note
account -> account : Initialize **UserCookie**
note left
- sub
- access_token
end note

== access_token verification ==

account -> connect : Fetch **JWKS**
note left
This is the flow for the **RS256 JWE**, which
most providers uses. In the case of **HS256**,
all it takes is the **client_secret**.
end note
connect -> account : Send back **JWKS** which are stored in memory
account -> account : decrypt and verify received **access_token**

== Refreshing the access_token ==

account -> connect : Send **refresh_token**
note left
The **access_token** has a validity period of one hour. To smooth 
the user experience, we are using a **refresh_token**, a one time
use token without expiration date. To refresh the user authorization.
end note
connect -> account : Send back a new **refresh_token** and **access_token**
note left
- client_id
- client_secret
- refresh_token
- grant_type: "refresh_token"
- scope
end note
account -> dynamo : Update **refresh_token**
account -> account : Update **access_token** in **UserCookie**
@enduml

' =============================================================================
' ======================= Identity commands and queries =======================
' =============================================================================

@startuml
skinparam NoteBackgroundColor #fff
skinparam NoteBorderColor #000

skinparam sequence {
	ArrowColor #000
	ActorBorderColor #000

	LifeLineBorderColor #000
	LifeLineBackgroundColor #000

	ParticipantBorderColor #000
	ParticipantBackgroundColor #fff
	ParticipantFontColor #000

	ActorBackgroundColor #000
	ActorFontColor #000

  NoteBorderColor #000
}

skinparam roundcorner 5

actor User                         as user
participant "Account Web Client"   as account
database DynamoDB                   as dynamo
participant "Connect"              as connect

== Add new Identity ==

user -> account : Input Identity value
activate account
account -> connect : Trigger the **sendIdentityValidationCode** query
note left
- callbackUrl
- identity
- localeOverride
- userId
end note
connect -> account : Returns **callbackUrl**, **eventId**, **localeCode** and **nounce**
account -> dynamo : Insert **TemporaryIdentity** with the **insertTemporaryIdentity** command
note left
- eventId
- value
- type
- expiresAt
end note
user -> account : Input verification code
account -> connect : Trigger the **checkVerificationCode** query
note left
- verification code
- event id
end note
account -> dynamo : Query back **TemporaryIdentity** and **verify** expiration date
account -> connect : Trigger the **addIdentityToUser** mutation
note left
- user_id
- value
- type
end note
account -> dynamo : Delete **TemporaryIdentity**
deactivate account

== Delete Identity ==

account -> connect : Trigger **removeIdentityFromUser** mutation
note left
- user_id
- value
- type
end note

== Update Identity ==

note over user, connect
The update Identity flow is a mix between the two above, starting with the add Identity, and delete Identity if the first sequence succeed.
end note
@enduml


' ==============================================================================
' ============================= Fetching User data =============================
' ==============================================================================

@startuml

skinparam NoteBackgroundColor #fff
skinparam NoteBorderColor #000

skinparam sequence {
	ArrowColor #000
	ActorBorderColor #000

	LifeLineBorderColor #000
	LifeLineBackgroundColor #000

	ParticipantBorderColor #000
	ParticipantBackgroundColor #fff
	ParticipantFontColor #000

	ActorBackgroundColor #000
	ActorFontColor #000

  NoteBorderColor #000
}

skinparam roundcorner 5

actor User                         as user
participant "Account Web Client"   as account
database MongoDB                   as mongo
participant "Connect"              as connect
participant "Profile API"          as profile

== Fetching User data ==

account -> connect : Fetch User identities
connect -> account : Send back User identities

opt

account -> profile : Fetch User profile infos
profile -> account : Send back User profile infos

@enduml