/**
 * Connect Profile
 * The application stores user profile information, it is meant to be compliant to OpenID Connect specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { UsersAddress } from './UsersAddress';
import { HttpFile } from '../http/http';

export class UserResponse {
    /**
    * Identifier for the End-User at the Issuer.
    */
    'sub'?: string;
    /**
    * End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's preferences.
    */
    'name'?: string;
    /**
    * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
    */
    'familyName'?: string;
    /**
    * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
    */
    'givenName'?: string;
    /**
    * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
    */
    'middleName'?: string;
    /**
    * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
    */
    'nickname'?: string;
    /**
    * Shorthand name by which the End-User wishes to be referred to by the Provider, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The Provider MUST NOT rely upon this value being unique.
    */
    'preferredUsername'?: string;
    /**
    * URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
    */
    'profile'?: string;
    /**
    * URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
    */
    'picture'?: string;
    /**
    * URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
    */
    'website'?: string;
    /**
    * End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
    */
    'gender'?: string;
    /**
    * End-User's birthday, represented as an ISO 8601:2004 [ISO8601â€‘2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
    */
    'birthdate'?: string;
    /**
    * String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
    */
    'zoneinfo'?: string;
    /**
    * End-User's locale.
    */
    'locale'?: string;
    'address'?: UsersAddress;
    /**
    * Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
    */
    'updatedAt'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "sub",
            "baseName": "sub",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "familyName",
            "baseName": "family_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "givenName",
            "baseName": "given_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "middleName",
            "baseName": "middle_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string",
            "format": ""
        },
        {
            "name": "preferredUsername",
            "baseName": "preferred_username",
            "type": "string",
            "format": ""
        },
        {
            "name": "profile",
            "baseName": "profile",
            "type": "string",
            "format": ""
        },
        {
            "name": "picture",
            "baseName": "picture",
            "type": "string",
            "format": ""
        },
        {
            "name": "website",
            "baseName": "website",
            "type": "string",
            "format": ""
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "string",
            "format": ""
        },
        {
            "name": "birthdate",
            "baseName": "birthdate",
            "type": "string",
            "format": ""
        },
        {
            "name": "zoneinfo",
            "baseName": "zoneinfo",
            "type": "string",
            "format": ""
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "string",
            "format": ""
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "UsersAddress",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return UserResponse.attributeTypeMap;
    }
    
    public constructor() {
    }
}

